{"version":3,"file":"static/js/344.825125dc.chunk.js","mappings":"2OAGaA,GAAmBC,E,QAAAA,IAAOC,EAAAA,GAAPD,CAAH,sD,mBCMvBE,EAAaC,EAAAA,GAAW,CAC5BC,KAAMD,EAAAA,GAAW,kBAAkBE,SAAS,oBAC5CC,MAAOH,EAAAA,GAAW,mBACfG,MAAM,qBACND,SAAS,qBACZE,SAAUJ,EAAAA,GAAW,sBAClBK,IAAI,EAAG,kCACPH,SAAS,0BAkDd,EA/CqB,WACnB,IAAMI,GAAWC,EAAAA,EAAAA,MAQjB,OACE,iCACE,SAAC,KAAD,CACEC,cATgB,CACpBP,KAAM,GACNE,MAAO,GACPC,SAAU,IAONK,iBAAkBV,EAClBW,SAAU,SAACC,EAAD,GAA4B,IAAjBC,EAAgB,EAAhBA,UACnBN,GAASO,EAAAA,EAAAA,IAASF,IAClBC,GACD,EANH,UAQE,UAAC,KAAD,YACE,qCAEE,SAAC,KAAD,CAAOE,KAAK,OAAOb,KAAK,aAG1B,SAACL,EAAD,CAAkBmB,UAAU,IAAId,KAAK,UACrC,sCAEE,SAAC,KAAD,CAAOa,KAAK,OAAOb,KAAK,cAE1B,SAACL,EAAD,CAAkBmB,UAAU,IAAId,KAAK,WACrC,yCAEE,SAAC,KAAD,CAAOa,KAAK,OAAOb,KAAK,iBAE1B,SAACL,EAAD,CAAkBmB,UAAU,IAAId,KAAK,cAErC,mBAAQa,KAAK,SAAb,4BAGJ,oDACyB,SAAC,KAAD,CAASE,GAAG,SAAZ,wBAI9B,EC3DD,EAJqB,WACnB,OAAO,SAAC,EAAD,GACR,C","sources":["components/RegisterForm/RegisterForm.styled.js","components/RegisterForm/RegisterForm.js","page/Register.js"],"sourcesContent":["import { ErrorMessage } from \"formik\";\nimport styled from \"styled-components\";\n\nexport const ErrorMessageForm = styled(ErrorMessage)`\ncolor:red;\nfont-size: 18px;\n`\n","import { useDispatch } from 'react-redux';\n\nimport { NavLink } from 'react-router-dom';\nimport { Formik, Form, Field } from 'formik';\nimport * as Yup from 'yup';\nimport { ErrorMessageForm } from './RegisterForm.styled';\n// import LoginForm from 'page/Login';\nimport { register } from 'redux/auth/operations';\n\nconst userSchema = Yup.object({\n  name: Yup.string('Type your name').required('Name is required'),\n  email: Yup.string('Type your email')\n    .email('Type verify email')\n    .required('Email is required'),\n  password: Yup.string('Type your password')\n    .min(5, 'Password must be with 5 length')\n    .required('Password is required'),\n});\n\nconst RegisterForm = () => {\n  const dispatch = useDispatch();\n\n  const initialValues = {\n    name: '',\n    email: '',\n    password: '',\n  };\n\n  return (\n    <>\n      <Formik\n        initialValues={initialValues}\n        validationSchema={userSchema}\n        onSubmit={(values, { resetForm }) => {\n          dispatch(register(values))\n          resetForm();\n        }}\n      >\n        <Form>\n          <label>\n            Name\n            <Field type=\"text\" name=\"name\" />\n          </label>\n\n          <ErrorMessageForm component=\"p\" name=\"name\" />\n          <label>\n            Email\n            <Field type=\"text\" name=\"email\" />\n          </label>\n          <ErrorMessageForm component=\"p\" name=\"email\" />\n          <label>\n            Password\n            <Field type=\"text\" name=\"password\" />\n          </label>\n          <ErrorMessageForm component=\"p\" name=\"password\" />\n\n          <button type=\"submit\">Register</button>\n        </Form>\n      </Formik>\n      <p>\n        If you have an account <NavLink to=\"/login\">Login</NavLink>\n      </p>\n    </>\n  );\n};\n\nexport default RegisterForm;","import  RegisterForm  from '../components/RegisterForm';\nconst RegisterPage = () => {\n  return <RegisterForm />;\n};\n\nexport default RegisterPage;"],"names":["ErrorMessageForm","styled","ErrorMessage","userSchema","Yup","name","required","email","password","min","dispatch","useDispatch","initialValues","validationSchema","onSubmit","values","resetForm","register","type","component","to"],"sourceRoot":""}